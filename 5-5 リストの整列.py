# Your code here!

# リストの整列
# ソートと呼ばれてる操作
# もうゲームとかRPGやってたらどんな昨日か想像が付く
#  まぁ辞書に記入していくわけだからこのソートと言う昨日はめっちゃ使う、覚えよ

weapons = [
    "イージスソード",
    "ウィンドスピア",
    "アースブレイカー",
    "イナズマハンマー",
    "1115の悲劇",
]
print(weapons)

'''改行してるが以下が出力結果。
['イージスソード', 'ウィンドスピア',
'アースブレイカー', 'イナズマハンマー', '1115の悲劇']
'''

#sorted関数
'''この様に書いた順に出力されて何か見づらいよね。
だからsorted関数を使ってソートしちゃうよ
以下コード''' 
print(sorted(weapons))
'''['1115の悲劇', 'アースブレイカー', 'イナズマハンマー', 'イージスソード', 'ウィ
ンドスピア']
って出力されたよ、ちゃんとソートされてるね
因みにこれはリストだけど
'''
#辞書でソートした場合は「key」だけソートして出力されるから注意してね。値については出力されないよ！


#sort関数
# sorted関数と結果は同じになるが
# sort関数
# はリストでしか利用が出来ない。
# ソートを反転させたい場合はsort関数にreverseパラメーターを加えればいい。
# 具体的には 
print(sorted(weapons, reverse=True))

'''出力結果
['ウィンドスピア', 'イージスソード', 'イナズマハンマー', 'アースブレイカー', '1115の悲劇']
'''

#以下公式チュート
'''
昇順と降順
list.sort()
と
sorted()
の両方とも
reverse パラメータを 
真偽値として受け付けます。
このパラメータは降順ソートを行うかどうかの フラグとして利用されます。
例えば、学生のデータを age の逆順で得たい場合:

>>> sorted(student_tuples, key=itemgetter(2), reverse=True)
[('john', 'A', 15), ('jane', 'B', 12), ('dave', 'B', 10)]
>>> sorted(student_objects, key=attrgetter('age'), reverse=True)
[('john', 'A', 15), ('jane', 'B', 12), ('dave', 'B', 10)]


因みに

でも作動するし普通にソートされる
これは
sorted
の裏では
, reverse=False
処理されてるってだけで、難しく考えることはないよ！
こまけぇ事はいいんだよ！
'''



weapons2 = [
    "1.イージスソード",
    "3.ウィンドスピア",
    "2.アースブレイカー",
    "5.イナズマハンマー",
    "4.1115の悲劇",
]
print(sorted(weapons2))
# もうソートの仕様に関してはPC扱ってファイル操作とかしてたら大体想像つくよね。
# そんな感じの認識でいいんじゃないのかな。


# 漢字が混ざってる場合はどうなるの？ 
weapons3 = [
    "バーニングソード",
    "風神スピア",
    "大地ブレイカー",
    "稲妻ハンマー",
]
print(sorted(weapons3))
'''出力結果
['バーニングソード', '大地ブレイカー', '稲妻ハンマー', '風神スピア']
長年の謎がようやく解けた。これ内部で管理してる文字コードでソートしてるから読み仮名順にならんかった
なんで漢字だけ並びバラバラなんやろとか思ってたらそういう事だった。
漢字とカタカナが混ざってる場合は文字コードでソートするからもっとややこしくなるぞ
なるほどなー
'''
