# Your code here!

# スコープを理解する
a = 10
b = 20

def sum(x, y):
    return x + y


num = (a + b)
print(num)
# 長いプログラム書いたら変数が多くなる
# そうなったら変数名決めるのが面倒ですよね。
# 変数名を間違えて重複させてしまったりするとプログラムが正常に動作しない可能性が含まれます。
# でも安心
# pythonでは変数の有効範囲が決まっている
# pythonの場合関数定義の中と外は完全に独立したコードとして扱われる
# これを変数の
# スコープ
# と呼ぶ

a = 10
b = 20

def sum1(x, y):
    a = 3
    print("hello" + str(a))
    return x + y

num = sum1(a, b)
print(num)
print("hello" + str(a))

'''出力
hello3
30
hello10
こーんな感じで外のa変数とdef内のa変数は独立してて
スコープ(defで定義した中の変数)外と中だと扱いが違うよって事
スコープの中が特別って考えたがいいかも。
こんな感じで定義してる関数の中の関数名はdef外の事を気にせずにネーミング出来る
'''


# pythonの変数の中には
# ローカル変数
# と
# グローバル変数
# 
# の二種類がある。
# ローカル変数 はスコープを持っている

# ・これに対してグローバル変数はどこでも利用できる。
#   逆を言えば、グローバル変数は定義してから下のコードすべてに影響を与える
#   ともいえる。
# ・pziza曰く グローバル変数とは。 
#   スコープがなく、関数定義を超えて利用できます。
#   ただし、どこで値が代入されたのか分かりにくくなるので、あまり奨励されません。
# ・グローバル変数は関数の中からは
#   参照だけ許可されていて代入や変更はこのままでは許可されていない
#   どうしても関数の中で変更を加えたい場合は以下の例を参考にするとよい

message = "paiza"
a = 10
b = 20

def sum2(x, y):
    a = 3
    global message
    message += "python"
    print(message + (" ") + str(a))
    return x + y
# global宣言つけると代入や変更が可能になるよ。
# でもglobal変数はどこで値がいじられたのか分かりにくくなるからあまり使用は奨励されて無いよ。

num = sum2(a, b)
print(num)
print(message + " " + str(a))


'''出力結果
paizapython 3
30
paizapython 10
'''