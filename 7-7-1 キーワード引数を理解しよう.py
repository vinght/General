# キーワード引数 とは
# 関数の引数にラベリング出来る機能

def sey_hello(greeting = "hello", target = "world"):
    print(greeting + " " + target)



sey_hello()
sey_hello("こんにちは", "皆さん")

'''
hello world
引数を書略した場合は greeting変数 に hello が代入され
target変数

こんにちは 皆さん


この様に関数の引数が複数あってそれぞれにデフォルト値が指定されてる場合
全ての引数を省略する という方法以外に
利用できる呼び出し方は無いのだろうかと思ったそこのあなた
指定した一つだけを省略したりなど
引数にデフォルト値をしていると呼び出す際の引数をいくつか省略することが出来るよ
やったね
以下の様に'''

sey_hello("good moning!")

'''出力結果。
hello world
こんにちは 皆さん
good moning world

引数good morning は greeting変数に代入されてる
デフォルト値がいくつかある場合、最初のデフォルト値を書き換えて
target変数 はデフォルト値で指定された world が代入されて
出力されているという訳。

この方法だと最初から定義された変数から順に代入されて行くから
target変数のみに代入したい！って時、不便だよね
そういう時に使うのが
引数にラベリングする。
「キーワード引数」

以下使い方'''

sey_hello(greeting = '虚飾を捨てて', target = '残るは誠')
'''出力結果
虚飾を捨てて 残るは誠

まぁデフォルト値が指定された変数を指定して値を代入すればいいじゃん
ってだけの話なんだが。
    ラベリングしてるから関数を呼び出すときにどの変数を指定してるのかわかりやすい。
    ラベルによってどの変数に対する値かが明確になってるから
    順番とかそんなの気にしなくてもいい
例としては。'''
sey_hello(target = 'La Vida', greeting = 'Viva')

'''出力結果
Viva La Vida
'''

sey_hello(target = 'ハロー')

sey_hello(greeting = '世界')

'''出力結果
hello ハロー
世界 world
こんな感じ。
'''