'''
Leet と呼ばれるインターネットスラングがあります。 
Leet ではいくつかのアルファベットをよく似た形の他の文字に置き換えて表記します。 Leet の置き換え規則はたくさんありますが、ここでは次の置き換え規則のみを考えましょう。
置き換え前	置き換え後
A	4
E	3
G	6
I	1
O	0
S	5
Z	2 文字列が入力されるので、これを Leet に変換して出力するプログラムを書いてください。
評価ポイント
10回のテストケースで、正答率、実行速度、メモリ消費量をはかり得点が決まります。
より早い回答時間で提出したほうが得点が高くなります。
複数のテストケースで正しい出力がされるか評価（+50点）
解答までの速さ評価（+50点）
入力される値
入力は以下のフォーマットで与えられます。

s
s は Leet に変換する前の文字列を表します。

それぞれの値は文字列で標準入力から渡されます。標準入力からの値取得方法はこちらをご確認ください
期待する出力
s を Leet に変換した文字列を１行に出力してください。

最後は改行し、余計な文字、空行を含んではいけません。
条件
すべてのテストケースで以下の条件を満たします。

・1 ≦ (s の長さ) ≦ 100
・s はアルファベット大文字のみからなる

入力例1
PAIZA
出力例1
P4124
入力例2
ALANTURING
出力例2
4L4NTUR1N6
'''
# リスト化して文字を参照してまた戻してとか大変そうだなぁと思ったので
# 文字を置換する方法が無いかを調べて書いたコードが以下


inp = input()
table = str.maketrans('AEGIOSZ', '4361052',)
result = inp.translate(table)
print(result)



'''どういう処理してるのかほんわかふわふわ分かるけれど、よー分からんかったので
以下、公式ドキュメントより
str.maketrans(x[, y[, z]])(原文)
この静的メソッドは str.translate() に使える変換テーブルを返します。

引数を 1 つだけ与える場合
それは Unicode 序数 (整数) または文字 (長さ 1 の文字列) 
を、Unicode 序数、(任意長の) 文字列、または None に対応づける辞書でなければなりません。
このとき、文字で指定したキーは序数に変換されます。

引数を 2 つ指定する場合、それらは同じ長さの文字列である必要があり
結果の辞書では、x のそれぞれの文字が y の同じ位置の文字に対応付けられます。
第 3 引数を指定する場合、文字列を指定する必要があり
それに含まれる文字が None に対応付けられます。



str.translate(table)
与えられた変換テーブルに基づいて文字列を構成する各文字をマッピングし
マッピング後の文字列のコピーを返します。
変換テーブルは、__getitem__() によるインデックス指定を実装するオブジェクトである必要があります。
一般的には、 mapping または sequence です。
Unicode 序数 (整数) でインデックス指定する場合
変換テーブルのオブジェクトは次のいずれも行うことができます。
Unicode 序数または文字列を返して文字を 1 文字以上の別の文字にマッピングすること
None を返して返り値の文字列から指定した文字を削除すること
例外 LookupError を送出して文字をその文字自身にマッピングすること。

文字から文字への異なる形式のマッピングから変換マップを作成するために
str.maketrans()
が使えます。

文字のマッピングを好みに合わせてより柔軟に変更する方法については
codecs モジュールも参照してください。

専門用語いっぱいである。
'''